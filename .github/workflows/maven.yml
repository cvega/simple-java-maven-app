name: Maven CI/CD

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - master

jobs:
  maven:
    runs-on: ubuntu-latest
    container:
      image: maven:3.8.3-jdk-11
      volumes:
        - /tmp/.m2:/root/.m2

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: 'adopt'
        settings-path: ${{ github.workspace }}
        

    - name: setup build env vars
      shell: bash
      run: |
        VERSION=""

        #get parameters
        while getopts v: flag
        do
          case "${flag}" in
            v) VERSION=${OPTARG};;
          esac
        done

        #get highest tag number, and add 1.0.0 if doesn't exist
        CURRENT_VERSION=`git describe --abbrev=0 --tags 2>/dev/null`

        if [[ $CURRENT_VERSION == '' ]]
        then
          CURRENT_VERSION='1.0.0'
        fi
        echo "Current Version: $CURRENT_VERSION"


        #replace . with space so can split into an array
        CURRENT_VERSION_PARTS=(${CURRENT_VERSION//./ })

        #get number parts
        VNUM1=${CURRENT_VERSION_PARTS[0]}
        VNUM2=${CURRENT_VERSION_PARTS[1]}
        VNUM3=${CURRENT_VERSION_PARTS[2]}

        if [[ $VERSION == 'major' ]]
        then
          VNUM1=$((VNUM1+1))
        elif [[ $VERSION == 'minor' ]]
        then
          VNUM2=$((VNUM2+1))
        elif [[ $VERSION == 'patch' ]]
        then
          VNUM3=$((VNUM3+1))
        else
          echo "No version type (https://semver.org/) or incorrect type specified, try: -v [major, minor, patch]"
          exit 1
        fi


        #create new tag
        NEW_TAG="$VNUM1.$VNUM2.$VNUM3"
        echo "($VERSION) updating $CURRENT_VERSION to $NEW_TAG"

        #get current hash and see if it already has a tag
        GIT_COMMIT=`git rev-parse HEAD`
        NEEDS_TAG=`git describe --contains $GIT_COMMIT 2>/dev/null`

        #only tag if no tag already
        #to publish, need to be logged in to npm, and with clean working directory: `npm login; git stash`
        if [ -z "$NEEDS_TAG" ]; then
          npm version $NEW_TAG
          npm publish --access public
          echo "Tagged with $NEW_TAG"
          git push --tags
          git push
        else
          echo "Already a tag on this commit"
        fi

        exit 0
        
    - name: mvn clean verify
      if: github.event_name == 'pull_request' || github.ref != 'refs/heads/master'
      # this only applies to pull requests and branches 
      run: mvn clean verify

    - name: create snapshot
      # create the snapshot for the dev branch on release*
      if: github.event_name == 'push' && github.ref == 'refs/heads/release*'
      run: |
        mvn versions:set -DnewVersion="${{ env.RELEASE_VERSION }}-${{ env.SHORT_HEAD }}-$(date '+%Y%m%d%H%M%S')-SNAPSHOT"
        mvn clean install
    
    - uses: actions/github-script@v6
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      id: tag-release
      with:
        github-token: "${{ secrets.GITHUB_TOKEN }}"
        script: |
          github.rest.repos.createRelease({
            owner: "cvega",
            repo: "simple-java-maven-app",
            tag_name: "${{ env.RELEASE_VERSION }}"
          })
    
    - name: create release
      # create a release off the master branch
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        mvn versions:set -DnewVersion=${{ env.RELEASE_VERSION }}-RELEASE
        mvn clean deploy -s $GITHUB_WORKSPACE/settings.xml -Drelease
    
    - uses: actions/upload-artifact@v3
      name: archive artifact
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      with:
        name: "maven-artifact-${{ env.RELEASE_VERSION }}-RELEASE"
        path: target/**     
    

