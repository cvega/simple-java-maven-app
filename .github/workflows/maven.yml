name: Maven CI/CD

on:
  push:
    branches:
      - 'main'
      - '**'
  pull_request:
    branches:
      - master
  release:
    types:
      - created

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: 'adopt'
        cache: 'maven'
        server-id: github
        settings-path: ${{ github.workspace }}

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build and test (Pull Request, Push to branch that is not master)
      if: github.event_name == 'pull_request' || github.ref != 'refs/heads/master'
      run: mvn clean verify

    - name: Build and deploy SNAPSHOT (Push to master)
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      run: |
        git fetch --prune --unshallow --tags
        
        # Get the latest release version
        LATEST_RELEASE=$(git describe --tags $(git rev-list --tags --max-count=1))
        echo $LATEST_RELEASE
        
        # Increment the patch version
        NEW_VERSION=$(echo $LATEST_RELEASE | awk -F. -v OFS=. '{$NF+=1} 1')
        echo $NEW_VERSION

        mvn versions:set -DnewVersion="${NEW_VERSION}-SNAPSHOT"
        mvn clean deploy -s "${GITHUB_WORKSPACE}/settings.xml"
      env:
        GITHUB_TOKEN: ${{ github.token }}
        
    - name: Publish to GitHub Packages Apache Maven (Release)
      # Add a conditional expression to this step to ensure it only runs when a release is created
      if: github.event_name == 'release'
      run: |
        # Extract version from release tag (e.g., "v1.0.0" -> "1.0.0")
        VERSION=$(echo "${{ github.ref }}" | sed -e 's/refs\/tags\/v//')
        # Set the project version to the release version
        mvn versions:set -DnewVersion=$VERSION-RELEASE
        # Deploy the release to GitHub Packages
        mvn clean deploy -s $GITHUB_WORKSPACE/settings.xml -Drelease
      env:
        GITHUB_TOKEN: ${{ github.token }}
