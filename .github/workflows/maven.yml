name: Maven CI/CD

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - master
  release:
    types:
      - created

jobs:
  maven:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: 'adopt'
        cache: 'maven'
        server-id: github
        settings-path: ${{ github.workspace }}

    - name: cache maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: mvn clean verify
      if: github.event_name == 'pull_request' || github.ref != 'refs/heads/master'
      # this only applies to pull requests and branches 
      run: mvn clean verify

    - name: create snapshot
      # create the snapshot for the dev branch on release*
      if: github.event_name == 'push' && github.ref == 'refs/heads/release*'
      run: |
        git fetch --prune --unshallow --tags
        
        # Get the latest release version
        LATEST_RELEASE=$(git describe --tags $(git rev-list --tags --max-count=1))
        echo $LATEST_RELEASE
        
        # Increment the patch version
        NEW_VERSION=$(echo $LATEST_RELEASE | awk -F. -v OFS=. '{$NF+=1} 1')
        echo $NEW_VERSION
        
        # Get short HEAD
        SHORT_HEAD=$(git rev-parse --short HEAD)
        
        # timestamp
        TIMESTAMP=$(date "+%Y%m%d%H%M%S")

        mvn versions:set -DnewVersion="${NEW_VERSION}-${SHORT_HEAD}-${TIMESTAMP}-SNAPSHOT"
        mvn clean install
    
    - uses: actions/github-script@v6
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      id: tag-release
      with:
        script: |
          github.rest.repos.createRelease({
            owner: "cvega",
            repo: "simple-java-maven-app",
            tag_name: "v0.0.7"
          })
    
    - name: create release
      # create a release off the master branch
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        git fetch --prune --unshallow --tags
        
        # Get the latest release version
        LATEST_RELEASE=$(git describe --tags $(git rev-list --tags --max-count=1))
        echo $LATEST_RELEASE
        
        # Increment the patch version
        NEW_VERSION=$(echo $LATEST_RELEASE | awk -F. -v OFS=. '{$NF+=1} 1')

        # Set the project version to the release version
        mvn versions:set -DnewVersion=$NEW_VERSION-RELEASE
        
        # Deploy the release to GitHub Packages
        mvn clean deploy -s $GITHUB_WORKSPACE/settings.xml -Drelease
    
    - uses: actions/upload-artifact@v3
      name: archive artifact
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      with:
        name: maven-artifact
        path: target/**     
    

